// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 市场实体
model Market {
  id          String       @id @default(cuid())
  code        String       @unique // EU, UK, CCA, CEA, CCER, CDR
  name        String
  region      String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  instruments Instrument[]

  @@map("markets")
}

// 交易工具/标的
model Instrument {
  id           String         @id @default(cuid())
  marketId     String
  code         String // EUA, UKA, CCA, CEA, CCER, CDR-Durable等
  name         String
  unit         String         @default("tCO2e")
  currency     String // EUR, GBP, USD, CNY
  description  String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  market       Market         @relation(fields: [marketId], references: [id])
  dailyPrices  DailyPrice[]
  derivedMetrics DerivedMetric[]

  @@unique([marketId, code])
  @@index([marketId])
  @@map("instruments")
}

// 交易场所/数据源
model Venue {
  id          String       @id @default(cuid())
  name        String
  code        String       @unique
  url         String?
  country     String?
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dailyPrices DailyPrice[]

  @@map("venues")
}

// 每日价格数据
model DailyPrice {
  id           String      @id @default(cuid())
  instrumentId String
  date         DateTime    @db.Date
  price        Decimal     @db.Decimal(18, 4)
  priceType    PriceType   @default(CLOSE)
  currency     String
  unit         String      @default("tCO2e")
  volume       Decimal?    @db.Decimal(18, 4)
  venueId      String?
  sourceUrl    String?
  collectedAt  DateTime    @default(now())
  collectedBy  String?
  evidenceId   String?
  qaStatus     QAStatus    @default(PENDING)
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  instrument   Instrument  @relation(fields: [instrumentId], references: [id])
  venue        Venue?      @relation(fields: [venueId], references: [id])
  evidence     Attachment? @relation(fields: [evidenceId], references: [id])

  @@unique([instrumentId, date])
  @@index([date])
  @@index([instrumentId])
  @@index([qaStatus])
  @@map("daily_prices")
}

// 衍生指标
model DerivedMetric {
  id           String     @id @default(cuid())
  instrumentId String
  date         DateTime   @db.Date
  ma7          Decimal?   @db.Decimal(18, 4) // 7日移动均线
  ma30         Decimal?   @db.Decimal(18, 4) // 30日移动均线
  dod          Decimal?   @db.Decimal(18, 4) // 日环比 %
  wow          Decimal?   @db.Decimal(18, 4) // 周环比 %
  mom          Decimal?   @db.Decimal(18, 4) // 月环比 %
  volatility30d Decimal?  @db.Decimal(18, 4) // 30日波动率
  pctFromMa30  Decimal?   @db.Decimal(18, 4) // 相对30日均线偏离 %
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  instrument   Instrument @relation(fields: [instrumentId], references: [id])

  @@unique([instrumentId, date])
  @@index([date])
  @@index([instrumentId])
  @@map("derived_metrics")
}

// 附件/证据
model Attachment {
  id          String       @id @default(cuid())
  fileName    String
  filePath    String
  fileType    String
  fileSize    Int
  sha256      String?
  uploadedBy  String?
  uploadedAt  DateTime     @default(now())
  createdAt   DateTime     @default(now())
  
  dailyPrices DailyPrice[]

  @@map("attachments")
}

// 审计日志
model AuditLog {
  id         String   @id @default(cuid())
  entity     String   // 实体类型
  entityId   String   // 实体ID
  action     String   // CREATE, UPDATE, DELETE, APPROVE, REJECT
  actor      String   // 操作者
  diff       Json?    // 变更内容
  metadata   Json?    // 额外元数据
  createdAt  DateTime @default(now())

  @@index([entity, entityId])
  @@index([actor])
  @@index([createdAt])
  @@map("audit_logs")
}

// 汇率表（二期使用）
model ExchangeRate {
  id         String   @id @default(cuid())
  date       DateTime @db.Date
  fromCurrency String
  toCurrency String
  rate       Decimal  @db.Decimal(18, 8)
  source     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([date, fromCurrency, toCurrency])
  @@index([date])
  @@map("exchange_rates")
}

// 数据导入批次
model ImportBatch {
  id          String   @id @default(cuid())
  fileName    String
  fileType    String   // CSV, JSON, MANUAL
  status      ImportStatus @default(PENDING)
  totalRows   Int      @default(0)
  successRows Int      @default(0)
  failedRows  Int      @default(0)
  errors      Json?
  importedBy  String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("import_batches")
}

// 枚举类型
enum PriceType {
  SETTLEMENT
  CLOSE
  MID
  OPEN
  HIGH
  LOW
}

enum QAStatus {
  PENDING
  APPROVED
  REJECTED
  REVIEWING
}

enum ImportStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  PARTIAL
}